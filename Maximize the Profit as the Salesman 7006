class Solution {
public:
    int maximizeTheProfit(int n, vector<vector<int>>& offers) {
        std::sort(offers.begin(), offers.end(), [](const std::vector<int>& a, const std::vector<int>& b) {
            return a[1] < b[1]; // Sort offers based on endi in ascending order
        });

        std::vector<long long> dp(n, 0); // Use long long to avoid overflow

        for (int i = 0; i < n; ++i) {
            dp[i] = i > 0 ? dp[i - 1] : 0;

            int start = offers[i][0];
            int end = offers[i][1];
            int gold = offers[i][2];

            if (start > 0) {
                dp[i] = std::max(dp[i], dp[start - 1] + gold);
            } else {
                dp[i] = std::max(dp[i], static_cast<long long>(gold));
            }
        }

        return static_cast<int>(dp[n - 1]);
    }
};
