class Solution {
public:
    int minimumOperations(string num) {
    int n = num.size();
    int ans = INT_MAX;

    // Consider all possible pairs of digits to delete.
    for (int i = 0; i < n; ++i) {
        for (int j = i + 1; j < n; ++j) {
            // Create a new string without the digits at positions i and j.
            string newNum = num.substr(0, i) + num.substr(i + 1, j - i - 1) + num.substr(j + 1);
            
            // Try to convert the new string to an integer and check if it's divisible by 25.
            int x;
            try {
                x = stoi(newNum);
            } catch (const invalid_argument& e) {
                continue; // Skip if conversion fails.
            }

            if (x % 25 == 0) {
                // Calculate the number of deleted digits.
                int deletedDigits = n - newNum.size();
                ans = min(ans, deletedDigits);
            }
        }
    }

    return (ans == INT_MAX) ? -1 : ans;
}
};
